import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, classification_report, accuracy_score, precision_score, f1_score
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from imblearn.over_sampling import SMOTE

data = pd.read_excel('dataset-publicaciones-x.xlsx', header=None, names=['text'])

insultos = pd.read_csv('insultos.csv', names=['palabras'])

insultos_list = insultos['palabras'].tolist()

data['text'] = data['text'].astype(str)


def contains_insults(text):
    for insult in insultos_list:
        if insult in text:
            return 1
    return 0

data['label'] = data['text'].apply(contains_insults)

vectorizer = TfidfVectorizer(stop_words='english', ngram_range=(1, 2), max_df=0.75)
X = vectorizer.fit_transform(data['text'])
y = data['label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

smote = SMOTE(random_state=42)
X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)

param_grid = {
    'C': [0.1, 1, 10, 100],
    'kernel': ['linear', 'rbf', 'poly'],
    'gamma': [1, 0.1, 0.01, 0.001]
}

grid_search = GridSearchCV(SVC(), param_grid, scoring='f1', cv=5, n_jobs=-1)
grid_search.fit(X_train_smote, y_train_smote)

best_model = grid_search.best_estimator_

y_pred = best_model.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)

print("Mejores hiperpar√°metros encontrados:", grid_search.best_params_)
print("Accuracy:", accuracy)
print("Precision:", precision)
print("F1-score:", f1)
print(classification_report(y_test, y_pred))

metrics = {'Accuracy': accuracy, 'Precision': precision, 'F1-score': f1}
names = list(metrics.keys())
values = list(metrics.values())

plt.figure(figsize=(10, 5))
sns.barplot(x=names, y=values)
plt.ylim(0, 1)
plt.title('Evaluation Metrics')
plt.ylabel('Score')
plt.show()
